@page "/personssearch"
@rendermode InteractiveServer
@using MudBlazorTable.Repositories
@inject PersonsRepository _personsRepository;
@using Person = MudBlazorTable.Models.Person;
<h3>Persons</h3>

<MudTable Items="@persons" Filter="new Func<Person, bool>(x=>FilterFunc(x, searchString1))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Persons</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Email</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    List<Person> persons = new List<Person>();
    string searchString1;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        persons = _personsRepository.Get();

    }

    private bool FilterFunc(Person person, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (person.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (person.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (string.Equals(person.Email, searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


}
